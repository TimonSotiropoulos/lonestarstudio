// *******************************************************
// Font Generated Style File
// -------------------------------------------------------
// This file contains the generated scss for fonts
// that are used throughout the application
//
// How To Use:
// Ensure your project has Sass/SCSS modules installed
// then import this file into your required component.
// The styles can then be added following the guide below.
// -------------------------------------------

// *******************************************
// Style Guide
// -------------------------------------------
//
// Inside JS File:
// import Font from '../path/to/styles/Font.scss';
//
// Font.normal = Will set just the font family
// Font.bold = Will add bold to the element
// Font.italic = Will add italic to the element
// Font.boldItalic = Will add both bold/italic to the element
// Font.Size_1 = font-size: 1px;
// Font.Color_white = color: white;
// --------------------------------

// *******************************************
// Import Statements
// -------------------------------------------
@import "./Colours";

@mixin font($font-family, $font-file) {
  @font-face {
    font-family: $font-family;
    src: url($font-file+'.eot');
    src: url($font-file+'.eot?#iefix') format('embedded-opentype'),
    url($font-file+'.woff') format('woff'),
    url($font-file+'.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
  }
}

@include font('Roboto-Bold', '../assets/fonts/Roboto-Bold');
@include font('Roboto-BoldItalic', '../assets/fonts/Roboto-BoldItalic');
@include font('Roboto-Medium', '../assets/fonts/Roboto-Medium');
@include font('Roboto-MediumItalic', '../assets/fonts/Roboto-MediumItalic');
@include font('Roboto', '../assets/fonts/Roboto-Regular');
@include font('Roboto-Italic', '../assets/fonts/Roboto-Italic');
@include font('Roboto-Light', '../assets/fonts/Roboto-Light');
@include font('Roboto-LightItalic', '../assets/fonts/Roboto-LightItalic');
@include font('Roboto-Thin', '../assets/fonts/Roboto-Thin');
@include font('Roboto-ThinItalic', '../assets/fonts/Roboto-ThinItalic');
// --------------------------------
// --------------------------------

// *******************************************
// Style Implementation
// -------------------------------------------
.bold {
    font-family: 'Roboto-Bold', sans-serif;
    font-weight: bold;
}

.boldItalic {
    font-family: 'Roboto-BoldItalic', sans-serif;
    font-weight: bold;
    font-style: italic;
}

.medium {
    font-family: 'Roboto-Medium', sans-serif;
    font-weight: 500;
}

.mediumItalic {
    font-family: 'Roboto-MediumItalic', sans-serif;
    font-weight: 500;
    font-style: italic;
}

.normal {
    font-family: 'Roboto', sans-serif;
    font-weight: normal;
}

.italic {
    font-family: 'Roboto-Italic', sans-serif;
    font-weight: normal;
    font-style: italic;
}

.light {
    font-family: 'Roboto-Light', sans-serif;
    font-weight: 300;
}

.lightItalic {
    font-family: 'Roboto-LightItalic', sans-serif;
    font-weight: 300;
    font-style: italic;
}

.thin {
    font-family: 'Roboto-ThinItalic', sans-serif;
    font-weight: 100;
}

.thinItalic {
    font-family: 'Roboto-ThinItalic', sans-serif;
    font-weight: 100;
    font-style: italic;
}

.underline {
    text-decoration: underline;
}

.underline_Hover {
    text-decoration: none;
    &:hover {
        text-decoration: underline;
    }
}

.uppercase {
    text-transform: uppercase;
}

.pointer {
    cursor: pointer;
}

@each $name, $hexcodes in $colors {
  .Colour_#{$name} {
      color: #{nth($hexcodes, 1)};
  }
  .Colour_#{$name}_Hover {
      color: #{nth($hexcodes, 1)};
      &:hover {
          cursor: pointer;
          color: #{nth($hexcodes, 2)};
      }
  }
  .Colour_#{$name}ChildHover {
      cursor: pointer;
      &:hover .childHoverTarget {
          cursor: pointer;
          color: #{nth($hexcodes, 1)};
      }
  }
}

@for $number from 0 through 100 {
    .Size_#{$number} {
        font-size: #{$number}px;
    }
}

$lineHeight: 1;
@while $lineHeight < 2.1 {
  $lineHeight: $lineHeight + 0.1;
  $index: $lineHeight * 10;
  .LineHeight_#{$index} {
      line-height: $lineHeight;
  }
}
// --------------------------------
